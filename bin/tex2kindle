#!/usr/bin/env python3
#
# Copyright (c) 2015-2025 Arkadiusz Bokowy
#
# This file is a part of calibre-latex.
#
# This project is licensed under the terms of the MIT license.

import logging
import os
import re
import shutil
import subprocess
import tempfile
from argparse import ArgumentParser
from pathlib import Path


# Setup default logging configuration
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s: %(message)s",
)


class TexMetadataReader:
    """TeX document metadata extractor."""

    re_document_class = re.compile(r"\\documentclass.*{(.+)}")
    re_languages = re.compile(r"\\usepackage\[(.*)\]{babel}")
    re_author = re.compile(r"\\author{(.+)}")
    re_cover = re.compile(r"\\covergraphic{(.+)}")
    re_date = re.compile(r"\\date{(.+)}")
    re_publisher = re.compile(r"\\publisher{(.+)}")
    re_isbn = re.compile(r"\\ISBN{(\d+)}")

    def __init__(self, file):
        with open(file, encoding="utf-8") as f:
            self.content = f.readlines()

    def _get_first_match(self, re_match):
        for x in self.content:
            match = re_match.match(x)
            if match is not None:
                return match

    def _unescape(self, text):
        return re.sub(r"\\(.)", r"\1", text)

    def get_document_class(self):
        match = self._get_first_match(self.re_document_class)
        if match is not None:
            return match.group(1)

    def get_languages(self):
        match = self._get_first_match(self.re_languages)
        if match is not None:
            return [x.strip() for x in match.group(1).split(",")]

    def get_author(self):
        match = self._get_first_match(self.re_author)
        if match is not None:
            return self._unescape(match.group(1))

    def get_cover(self):
        match = self._get_first_match(self.re_cover)
        if match is not None:
            return self._unescape(match.group(1))

    def get_date(self):
        match = self._get_first_match(self.re_date)
        if match is not None:
            return self._unescape(match.group(1))

    def get_publisher(self):
        match = self._get_first_match(self.re_publisher)
        if match is not None:
            return self._unescape(match.group(1))

    def get_isbn(self):
        match = self._get_first_match(self.re_isbn)
        if match is not None:
            return match.group(1)


parser = ArgumentParser(
    description="(La)TeX document converter for Kindle-compatible devices.",
)
parser.add_argument(
    "--engine",
    help="use given TeX engine for TeX to HTML conversion",
    choices=("latex", "lualatex", "xelatex"),
    default="latex",
    action="store",
    dest="engine",
)
parser.add_argument(
    "--keep-files",
    help="keep intermediary files created during the TeX file processing",
    action="store_true",
    dest="keep_files",
)
parser.add_argument(
    "--keep-html",
    help="keep HTML files created during the TeX file processing",
    action="store_true",
    dest="keep_html",
)
parser.add_argument(
    "FILE",
    help="input TeX document file",
    action="store",
    type=Path,
)


# make sure, that the required command is available
def assert_required_command(cmd):
    if not shutil.which(cmd):
        logging.error("Missing required command: %s", cmd)
        parser.exit()


# wrapper for subprocess call method, which logs called command
def call_command(*args):
    logging.info("RUN: %s", " ".join(args))
    return subprocess.run(args)


args = parser.parse_args()

assert_required_command("mk4ht")
assert_required_command("ebook-convert")

try:
    metadata = TexMetadataReader(args.FILE)
except (FileNotFoundError, PermissionError) as e:
    parser.print_usage()
    logging.error("%s: %s", e.strerror, e.filename)
    parser.exit()

# The mk4ht command might not work properly if it is not executed in the
# same directory as the input file.
os.chdir(args.FILE.parent)

# The mk4ht command does not work with input files with white-spaces in the
# file name. To overcome this, create a temporary file and copy the content
# of the input file into it.
with tempfile.NamedTemporaryFile(mode="wb", suffix=".tex", delete=False,
                                 dir=".") as f:
    f_name = Path(f.name)

    # Copy the content of the input TeX file into the temporary file.
    with open(args.FILE, "rb") as g:
        f.write(g.read())
        f.flush()
    # Process TeX to HTML conversion.
    call_command(
        "mk4ht",
        "ht{}".format(args.engine),
        # Do not pass the path to the temporary file, as mk4ht does not
        # handle special characters in the file name.
        str(f_name.name),
        "xhtml,pmathml",
    )

    # Clean mess left by the mk4ht command.
    if not args.keep_files:
        extensions = (
            ".4ct", ".4tc", ".aux", ".css", ".dvi", ".ent", ".idv", ".lg",
            ".log", ".out", ".out.ps", ".tmp", ".toc", ".xdv", ".xref")
        for tmp in map(lambda x: f_name.with_suffix(x), extensions):
            tmp.unlink(missing_ok=True)

    # Convert previously generated HTML document(s) into the MOBI format
    # using Calibre conversion suite. This conversion is optimized for a
    # Kindle device.

    convert_options = [
        "--output-profile=kindle",
        "--no-inline-toc",
        # "--share-not-sync",
    ]

    document_class = metadata.get_document_class()
    if document_class == "article":
        convert_options.append('--chapter=//*[@class="sectionHead"]')
        # extra_options.append('--level1-toc=//h:h3[@class="sectionHead"]')
        # extra_options.append('--level2-toc=//h:h4[@class="subsectionHead"]')
    if document_class == "book":
        convert_options.append('--chapter=//*[re:test(@class,"partHead|chapterHead")]')
        # extra_options.append('--level1-toc=//h:h2[@class="chapterHead"]')
        # extra_options.append('--level2-toc=//h:h3[@class="sectionHead"]')

    languages = metadata.get_languages()
    if languages:
        convert_options.append("--language=" + languages[0])
    author = metadata.get_author()
    if author:
        convert_options.append("--authors=" + author)
    cover = metadata.get_cover()
    if cover:
        convert_options.append("--cover=" + cover)
    publisher = metadata.get_publisher()
    if publisher:
        convert_options.append("--publisher=" + publisher)
    isbn = metadata.get_isbn()
    if isbn:
        convert_options.append("--isbn=" + isbn)

    call_command(
        "ebook-convert",
        str(f_name.with_suffix(".html")),
        str(args.FILE.with_suffix(".mobi").name),
        *convert_options
    )

    f.close()
    # Remove the temporary file.
    f_name.unlink()

    # Remove HTML files generated by the mk4ht command.
    if not args.keep_html and not args.keep_files:
        tmp = re.escape(str(f_name.with_suffix("").name))
        re_html = re.compile(r'{}\d*\.html'.format(tmp))
        for tmp in filter(re_html.match, os.listdir(args.FILE.parent)):
            Path(tmp).unlink()
