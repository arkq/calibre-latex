#!/usr/bin/env python3
#
# Copyright (c) 2015-2024 Arkadiusz Bokowy
#
# This file is a part of calibre-latex.
#
# This project is licensed under the terms of the MIT license.

import logging
import re
import shutil
import subprocess
from argparse import ArgumentParser
from os import listdir
from os import path
from os import unlink


# Setup default logging configuration
logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s: %(message)s",
)


class TexMetadataReader:
    """TeX document metadata extractor."""

    re_documentclass = re.compile(r"\\documentclass.*{(.+)}")
    re_languages = re.compile(r"\\usepackage\[(.*)\]{babel}")
    re_author = re.compile(r"\\author{(.+)}")
    re_cover = re.compile(r"\\covergraphic{(.+)}")
    re_date = re.compile(r"\\date{(.+)}")
    re_publisher = re.compile(r"\\publisher{(.+)}")
    re_isbn = re.compile(r"\\ISBN{(\d+)}")

    def __init__(self, file):
        with open(file) as f:
            self.content = f.readlines()

    def _get_first_match(self, re_match):
        for x in self.content:
            match = re_match.match(x)
            if match is not None:
                return match

    def _unescape(self, text):
        return re.sub(r"\\(.)", r"\1", text)

    def get_document_class(self):
        match = self._get_first_match(self.re_documentclass)
        if match is not None:
            return match.group(1)

    def get_languages(self):
        match = self._get_first_match(self.re_languages)
        if match is not None:
            return [x.strip() for x in match.group(1).split(",")]

    def get_author(self):
        match = self._get_first_match(self.re_author)
        if match is not None:
            return self._unescape(match.group(1))

    def get_cover(self):
        match = self._get_first_match(self.re_cover)
        if match is not None:
            return self._unescape(match.group(1))

    def get_date(self):
        match = self._get_first_match(self.re_date)
        if match is not None:
            return self._unescape(match.group(1))

    def get_publisher(self):
        match = self._get_first_match(self.re_publisher)
        if match is not None:
            return self._unescape(match.group(1))

    def get_isbn(self):
        match = self._get_first_match(self.re_isbn)
        if match is not None:
            return match.group(1)


parser = ArgumentParser(
    description="(La)TeX document converter for Kindle-compatible devices.",
)
parser.add_argument(
    "--engine",
    help="use given TeX engine for TeX to HTML conversion",
    choices=("latex", "lualatex", "xelatex"),
    default="latex",
    action="store",
    dest="engine",
)
parser.add_argument(
    "--keep-files",
    help="keep intermediary files created during the TeX file processing",
    action="store_true",
    dest="keep_files",
)
parser.add_argument(
    "--keep-html",
    help="keep HTML files created during the TeX file processing",
    action="store_true",
    dest="keep_html",
)
parser.add_argument(
    "FILE",
    help="input TeX document file",
    action="store",
)


# mk4ht might not handle white-spaces in the file name
def assert_no_whitespace(name):
    if name.find(" ") != -1:
        logging.warning(
            "White-space character found: {filename}\n"
            "\n"
            "NOTE: It is very unlikely that your version of mk4h will handle white-spaces\n"
            "      in the file name - in general it does not handle them. However, if you\n"
            "      feel lucky you may try to proceed and see what will happen. Otherwise,\n"
            "      try to rename your document, e.g.:\n"
            "      rename ' ' '_' '{filename}'\n".format(
                prog=parser.prog,
                filename=name,
            )
        )
        if input("Do you want to continue? [y/N] ").upper() != "Y":
            parser.exit()


# make sure, that the required command is available
def assert_required_command(cmd):
    if not shutil.which(cmd):
        logging.error("Missing required command: %s", cmd)
        parser.exit()


# wrapper for subprocess call method, which logs called command
def call_command(*args):
    logging.info("RUN: %s", " ".join(args))
    return subprocess.call(args)


args = parser.parse_args()

try:
    document_tex = args.FILE
    document_base = path.splitext(document_tex)[0]
except IndexError:
    parser.print_help()
    parser.exit()

assert_no_whitespace(document_tex)
assert_required_command("mk4ht")
assert_required_command("ebook-convert")

try:
    metadata = TexMetadataReader(document_tex)
except (FileNotFoundError, PermissionError) as e:
    parser.print_usage()
    logger.error("%s: %s", e.strerror, e.filename)
    parser.exit()

# process TeX to HTML conversion
call_command(
    "mk4ht",
    "ht{}".format(args.engine),
    document_tex,
    "xhtml,pmathml",
)

# clean mess left by the mk4ht command
if not args.keep_files:
    extensions = (
        "4ct", "4tc", "aux", "css", "dvi", "ent", "idv", "lg", "log",
        "out", "out.ps", "tmp", "toc", "xdv", "xref",
    )
    for tmp in map(lambda x: document_base + "." + x, extensions):
        if path.exists(tmp):
            unlink(tmp)

# Convert previously generated HTML document(s) into the MOBI format using
# Calibre conversion suite. This conversion is optimized for Kindle device.

convert_options = [
    "--output-profile=kindle",
    "--no-inline-toc",
    # "--share-not-sync",
]

documentclass = metadata.get_document_class()
if documentclass == "article":
    convert_options.append('--chapter=//*[@class="sectionHead"]')
    # extra_options.append('--level1-toc=//h:h3[@class="sectionHead"]')
    # extra_options.append('--level2-toc=//h:h4[@class="subsectionHead"]')
if documentclass == "book":
    convert_options.append('--chapter=//*[re:test(@class,"partHead|chapterHead")]')
    # extra_options.append('--level1-toc=//h:h2[@class="chapterHead"]')
    # extra_options.append('--level2-toc=//h:h3[@class="sectionHead"]')

languages = metadata.get_languages()
if languages:
    convert_options.append("--language=" + languages[0])
author = metadata.get_author()
if author:
    convert_options.append("--authors=" + author)
cover = metadata.get_cover()
if cover:
    convert_options.append("--cover=" + cover)
publisher = metadata.get_publisher()
if publisher:
    convert_options.append("--publisher=" + publisher)
isbn = metadata.get_isbn()
if isbn:
    convert_options.append("--isbn=" + isbn)

call_command(
    "ebook-convert",
    document_base + "." + "html",
    document_base + "." + "mobi",
    *convert_options
)

# remove HTML files generated by the mk4ht command
if not args.keep_html and not args.keep_files:
    re_html = re.compile(r'{}\d*\.html'.format(re.escape(path.basename(document_base))))
    for document_html in filter(re_html.match, listdir(path.dirname(document_base) or ".")):
        unlink(document_html)
